/*
 * Nextflow Configuration File for RNA-seq Analysis
 */

// Pipeline information
manifest {
    name            = 'RNA-seq-Analysis'
    author          = 'Seqera AI Assistant'
    homePage        = 'https://github.com/PawnChessmon/NextFlow'
    description     = 'RNA-seq analysis pipeline for A549 and H129 cell lines'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.0'
    version         = '1.0.0'
}

// Default parameters
params {
    // Input/Output
    samplesheet         = 'nfcore_rnaseq_samplesheet.csv'
    genome_fasta        = 'reference_files/GRCh38.primary_assembly.genome.fa'
    gtf                 = 'reference_files/gencode.v46.primary_assembly.annotation.gtf'
    outdir              = 'results'
    
    // Analysis options
    help                = false
    
    // Resource limits
    max_memory          = '128.GB'
    max_cpus            = 16
    max_time            = '240.h'
}

// Process configuration
process {
    // Default resources
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    
    errorStrategy = 'retry'
    maxRetries    = 2
    
    // Process-specific resources
    withName: SRA_DOWNLOAD {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    
    withName: FASTQC {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    
    withName: FASTP {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    
    withName: STAR_INDEX {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    
    withName: STAR_ALIGN {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
    }
    
    withName: SAMTOOLS_INDEX {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    
    withName: FEATURE_COUNTS {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    
    withName: MULTIQC {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
}

// Execution profiles
profiles {
    
    // Standard profile using Conda
    standard {
        conda.enabled      = true
        conda.createTimeout = '1h'
        
        process {
            withName: SRA_DOWNLOAD {
                conda = 'bioconda::sra-tools=3.0.3'
            }
            withName: FASTQC {
                conda = 'bioconda::fastqc=0.12.1'
            }
            withName: FASTP {
                conda = 'bioconda::fastp=0.23.4'
            }
            withName: 'STAR_INDEX|STAR_ALIGN' {
                conda = 'bioconda::star=2.7.10b'
            }
            withName: SAMTOOLS_INDEX {
                conda = 'bioconda::samtools=1.17'
            }
            withName: FEATURE_COUNTS {
                conda = 'bioconda::subread=2.0.3'
            }
            withName: MULTIQC {
                conda = 'bioconda::multiqc=1.15'
            }
        }
    }
    
    // Docker profile
    docker {
        docker.enabled      = true
        docker.userEmulation = true
        docker.runOptions   = '-u $(id -u):$(id -g)'
        
        process {
            withName: SRA_DOWNLOAD {
                container = 'quay.io/biocontainers/sra-tools:3.0.3--h9f5acd7_0'
            }
            withName: FASTQC {
                container = 'quay.io/biocontainers/fastqc:0.12.1--hdfd78af_0'
            }
            withName: FASTP {
                container = 'quay.io/biocontainers/fastp:0.23.4--h5f740d0_0'
            }
            withName: 'STAR_INDEX|STAR_ALIGN' {
                container = 'quay.io/biocontainers/star:2.7.10b--h9ee0642_0'
            }
            withName: SAMTOOLS_INDEX {
                container = 'quay.io/biocontainers/samtools:1.17--h00cdaf9_0'
            }
            withName: FEATURE_COUNTS {
                container = 'quay.io/biocontainers/subread:2.0.3--h7132678_1'
            }
            withName: MULTIQC {
                container = 'quay.io/biocontainers/multiqc:1.15--pyhdfd78af_0'
            }
        }
    }
    
    // Singularity profile
    singularity {
        singularity.enabled      = true
        singularity.autoMounts   = true
        
        process {
            withName: SRA_DOWNLOAD {
                container = 'https://depot.galaxyproject.org/singularity/sra-tools:3.0.3--h9f5acd7_0'
            }
            withName: FASTQC {
                container = 'https://depot.galaxyproject.org/singularity/fastqc:0.12.1--hdfd78af_0'
            }
            withName: FASTP {
                container = 'https://depot.galaxyproject.org/singularity/fastp:0.23.4--h5f740d0_0'
            }
            withName: 'STAR_INDEX|STAR_ALIGN' {
                container = 'https://depot.galaxyproject.org/singularity/star:2.7.10b--h9ee0642_0'
            }
            withName: SAMTOOLS_INDEX {
                container = 'https://depot.galaxyproject.org/singularity/samtools:1.17--h00cdaf9_0'
            }
            withName: FEATURE_COUNTS {
                container = 'https://depot.galaxyproject.org/singularity/subread:2.0.3--h7132678_1'
            }
            withName: MULTIQC {
                container = 'https://depot.galaxyproject.org/singularity/multiqc:1.15--pyhdfd78af_0'
            }
        }
    }
    
    // Test profile with small resources
    test {
        params {
            max_cpus   = 2
            max_memory = '6.GB'
            max_time   = '6.h'
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}